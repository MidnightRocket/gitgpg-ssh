#!/bin/zsh

# https://serverfault.com/questions/960619/using-named-pipes-to-control-a-remote-ssh-session-in-bash
# https://stackoverflow.com/a/20018118





set -eu
stderr() {
	printf "%b\n" "$@" 1>&2
}



reportError() {
	stderr "$2"
	return "$1"
}

commandv() {
	command -v "$1" || reportError "$?" "Executable '$1' not found"
}

mkfifo="$(commandv mkfifo)"
tr="$(commandv tr)"
head="$(commandv head)"
timeout="$(commandv timeout)"
ssh="$(commandv ssh)"
gpg="$(git config gpg.program)" || gpg="$(commandv gpg)"



KEY_ID="$(git config user.signingkey)" || reportError "$?" "Must configure gpg signing key using\n  git config --global user.signingkey \$KEYID"



cleanupTempDir() {
	# stderr "Doing cleanup rm '$TEMP_DIR'"
	rm -rf "$TEMP_DIR"
}
TEMP_SUFFIX="-gitgpg-remote"

# have to force parent dir to /tmp otherwise is
# Name for domain socket too long error is thrown by ssh
TEMP_DIR="$(mktemp -d --suffix "$TEMP_SUFFIX" -p "/tmp")"
trap 'cleanupTempDir' EXIT INT



# stderr "Local tempdir: $TEMP_DIR"


# STDIN_PIPE="$TEMP_DIR/stdin.pipe"
STDOUT_PIPE="$TEMP_DIR/stdout.pipe"
STDERR_PIPE="$TEMP_DIR/stderr.pipe"
# EXITCODE_PIPE="$TEMP_DIR/exitcode.pipe"

# $mkfifo "$STDIN_PIPE"
$mkfifo "$STDOUT_PIPE"
$mkfifo "$STDERR_PIPE"
# $mkfifo "$EXITCODE_PIPE"



SSH_ARGS=(-o "ControlMaster=auto" -o "ControlPath=$TEMP_DIR/S.control" -o "ControlPersist=15m")
SSH_SERVER="${1:?At least one argument required}"





REMOTE_TEMP_DIR="$(ssh $SSH_ARGS -T "$SSH_SERVER" "mktemp --suffix '$TEMP_SUFFIX' -d")"
# stderr "Remote tempdir: $REMOTE_TEMP_DIR"


REMOTE_STDIN_PIPE="$REMOTE_TEMP_DIR/stdin.pipe"
REMOTE_STDOUT_PIPE="$REMOTE_TEMP_DIR/stdout.pipe"
REMOTE_STDERR_PIPE="$REMOTE_TEMP_DIR/stderr.pipe"
REMOTE_EXITCODE_PIPE="$REMOTE_TEMP_DIR/exitcode.pipe"



$ssh $SSH_ARGS -T "$SSH_SERVER" <<-EOF
	mkfifo "$REMOTE_STDIN_PIPE"
	mkfifo "$REMOTE_STDOUT_PIPE"
	mkfifo "$REMOTE_STDERR_PIPE"
	mkfifo "$REMOTE_EXITCODE_PIPE"
EOF


cleanupSSH() {
	kill "$PID_BACKGROUND_LISTENER" 2> /dev/null || stderr "Failed to kill backgroundListener no such process"
	wait

	$timeout 5s $ssh $SSH_ARGS -T "$SSH_SERVER" "rm -rf '$REMOTE_TEMP_DIR' && echo 'Done cleanup on remote'" 1>&2

	cleanupTempDir
}

trap 'cleanupSSH' EXIT INT






backgroundSSHPipeStreaming() {
	$ssh $SSH_ARGS -T "$SSH_SERVER" "cat > $REMOTE_STDOUT_PIPE" < $STDOUT_PIPE &
	$ssh $SSH_ARGS -T "$SSH_SERVER" "cat > $REMOTE_STDERR_PIPE" < $STDERR_PIPE &
	wait
}


SIGNING_REQUEST_KEY="$($tr -dc A-Za-z0-9 </dev/urandom | $head -c 32)"


waitForSigningRequest() {
	while [ -d "$TEMP_DIR" ]; do
		REQUEST="$(ssh $SSH_ARGS -T "$SSH_SERVER" "cat $REMOTE_STDIN_PIPE")"
		if [ "$REQUEST" = "BEGIN SIGNING REQUEST $SIGNING_REQUEST_KEY" ]; then
			printf "%i" "0" | ssh $SSH_ARGS -T "$SSH_SERVER" "cat > $REMOTE_EXITCODE_PIPE"
			return 0
		else
			stderr "Not a valid signing request"
		fi
	done
}


backgroundListener() {
	ERROR_FILE="$TEMP_DIR/error"
	while [ -d "$TEMP_DIR" ]; do
		backgroundSSHPipeStreaming &

		waitForSigningRequest


		INPUT="$(ssh $SSH_ARGS -T "$SSH_SERVER" "cat $REMOTE_STDIN_PIPE")"


		# Set up FDs so gpg program can stream to them
		exec 8>$STDOUT_PIPE
		exec 9>$STDERR_PIPE

		
		EXITCODE="0" # Default exit code of zero
		printf "%s\n" "$INPUT" | $gpg --status-fd=2 -bsau "$KEY_ID" 1>&8 2>&9 || EXITCODE="$?"

		exec 8>&-
		exec 9>&-
		printf "%i" "$EXITCODE" | ssh $SSH_ARGS -T "$SSH_SERVER" "cat > $REMOTE_EXITCODE_PIPE"
		wait
	done
}

backgroundListener &
PID_BACKGROUND_LISTENER="$!"







$ssh $SSH_ARGS -t "$SSH_SERVER" "GITGPG_REMOTE_DIR='$REMOTE_TEMP_DIR' GITGPG_SIGNING_REQUEST_KEY='$SIGNING_REQUEST_KEY' \$SHELL -l"












# mosh --experimental-remote-ip=remote --ssh "ssh $SSH_ARGS" "$SSH_SERVER"
# Problems with using mosh is that support with Controlmaster socket is experimental
# See https://github.com/mobile-shell/mosh/issues/24
# Also if ControlMaster session drops, and Mosh session persists
# Then there will be a disconnect of control master, but the active mosh session will give 
# illution that session is still good. 

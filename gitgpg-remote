#!/bin/sh

set -eu

stderr() {
	printf "%b\n" "$@" 1>&2
}

reportError() {
	stderr "$2"
	return "$1"
}

commandv() {
	command -v "$1" || reportError "$?" "Executable '$1' not found"
}


# Check dependencies
gpg="$(commandv gpg)"
mkfifo="$(commandv mkfifo)"
timeout="$(commandv timeout)"






ARGS="$*"

# https://stackoverflow.com/a/8811800
# If ARGS does not contain '-bsau' then not signing request
if [ "${ARGS#*"-bsau"}" = "$ARGS" ]; then
	exec "$gpg" "$@"
fi




if [ -z "${GITGPG_REMOTE_DIR+x}" ] && [ -z "${GITGPG_SIGNING_REQUEST_KEY+x}" ]; then
	stderr "Missing environment GITGPG_REMOTE_DIR"
	stderr "Reverting to gpg"
	exec "$gpg" "$@"
fi


if [ ! -d "$GITGPG_REMOTE_DIR" ]; then
	stderr "No such directory '$GITGPG_REMOTE_DIR'"
	exit 1
fi


if [ -z "${GITGPG_SIGNING_REQUEST_KEY+x}" ]; then
	stderr "Missing environment GITGPG_SIGNING_REQUEST_KEY"
	exit 1
fi




checkForPipe() {
	if [ ! -p "$1" ]; then
		$mkfifo "$1"
	fi
}

STDIN_PIPE="$GITGPG_REMOTE_DIR/stdin.pipe"
STDOUT_PIPE="$GITGPG_REMOTE_DIR/stdout.pipe"
STDERR_PIPE="$GITGPG_REMOTE_DIR/stderr.pipe"
EXITCODE_PIPE="$GITGPG_REMOTE_DIR/exitcode.pipe"
checkForPipe "$STDIN_PIPE"
checkForPipe "$STDOUT_PIPE"
checkForPipe "$STDERR_PIPE"
checkForPipe "$EXITCODE_PIPE"



$timeout 3s sh <<-EOF || reportError "$?" "Timeout: likely broken pipe.\nTry to restart session"
	printf "%s" "BEGIN SIGNING REQUEST $GITGPG_SIGNING_REQUEST_KEY" > "$STDIN_PIPE"
	EXITCODE="\$(cat "$EXITCODE_PIPE")"
	if [ "\$EXITCODE" -ne 0 ]; then
		printf "%s\n" "Failed to initiate signing request" 1>&2
		exit "\$EXITCODE"
	fi
EOF





# Ignore warning about unreachable statements, because this is triggered via trap
# shellcheck disable=SC2317
cleanupFd() {
	exec 8<&-
	exec 9<&-

	exec 5<&-
	exec 6<&-
	kill "$PID_STDOUT_STEAMER" 2> /dev/null || true # Allow fail
	kill "$PID_STDERR_STEAMER" 2> /dev/null || true # Allow fail
}

trap 'cleanupFd' EXIT INT



INPUT="$(cat)"
printf "%s" "$INPUT" > "$STDIN_PIPE"


# stderr "Setting up pipes descriptors"

exec 8<"$STDOUT_PIPE"
exec 9<"$STDERR_PIPE"

# Create FDs for current stdout and stderr
# so they can be used by background processes
exec 5>&1
exec 6>&2

# Stream content from pipe files into stdout and stderr
cat <&8 >&5 &
PID_STDOUT_STEAMER="$!"
cat <&9 >&6 &
PID_STDERR_STEAMER="$!"










wait
# stderr "waiting for exit code"
EXITCODE="$(cat "$EXITCODE_PIPE")"

exit "$EXITCODE"



# have a timeout 
# timeout 2s 
